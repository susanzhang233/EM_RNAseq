include: "../config.py"

HUMAN_PRE = "NA12716_7"

PSIM_ANNO_PREFIX = "NA12716"
PSIM_ANNO_FA = "{0}/{1}.fa".format( ANNO, PSIM_ANNO_PREFIX )

PSIM_BWT_IDX = "../{0}/{1}".format( IDX, PSIM_ANNO_PREFIX )

RSEM_REF = "{0}/{1}_rsem/ref".format( IDX, PSIM_ANNO_PREFIX )
RSEM_REF_GRP = "{0}.grp".format( RSEM_REF )

PSIM_KAL_IDX = "{0}/{1}.kidx".format( IDX, PSIM_ANNO_PREFIX )
PSIM_SALMON_IDX = "{0}/{1}_salmon_idx".format( IDX, PSIM_ANNO_PREFIX )
PSIM_SAILFISH_IDX = "{0}/{1}_sailfish_idx".format( IDX, PSIM_ANNO_PREFIX )

# total number of simulations
SIMS_LIST = [i for i in range(1, 2)]


rule all:
    input:
        "analysis/R/NA12716_7_rsem.html"


########################################################################
# Indices
########################################################################

# prepare the main annotation to run RSEM on it
rule rsem_prepare:
    input:
        PSIM_ANNO_FA
    output:
        "{0}.grp".format( RSEM_REF )
    run:
        out_dir = '{0}/{1}_rsem'.format( IDX, PSIM_ANNO_PREFIX )
        shell('mkdir -p {0}'.format( out_dir ) )
        shell('rsem-prepare-reference {0} {1}'.format( PSIM_ANNO_FA, RSEM_REF ))


rule sailfish_index:
    output:
        SAILFISH,
        PSIM_SAILFISH_IDX 
    threads: N_THREADS
    shell:
        SAILFISH + ' index '
        '-t ' + PSIM_ANNO_FA + ' '
        '-o {output} '
        '-k 21'


rule kallisto_index:
    output:
        KALLISTO,
        PSIM_KAL_IDX
    threads: 1
    shell:
        KALLISTO + ' index '
        '-i ' + PSIM_KAL_IDX + ' ' +
        PSIM_ANNO_FA


########################################################################
# Real data to act as a seed for simulations
########################################################################

# align for RSEM on "real" data
rule rsem_align:
    input:
        "{sample}/{sample}_1.fastq.gz", 
        "{sample}/{sample}_2.fastq.gz"
    output:
        "{sample}/alignments/{sample}_rsem.bam"
    benchmark:
        "benchmarks/rsem_align/{sample}.json"
    threads:
        N_THREADS
    message:
        'Running bowtie2 (thr = {threads}) on {input}'
    shell:
        'bowtie2 '
        '--sensitive --dpad 0 --gbar 99999999 --mp 1,1 --np 1 --score-min L,0,-0.1 '
        '--no-mixed --no-discordant '
        '--seed 42 '
        '-k 200 '
        '-x ' + PSIM_BWT_IDX + ' '
        '-p {threads} '
        '-1 {input[0]} '
        '-2 {input[1]} | '
        'samtools view -Sb - > {output}'


# run RSEM on a "real" sample
rule rsem:
    input:
        RSEM_REF_GRP,
        "{sample}/alignments/{sample}_rsem.bam"
    output:
        "{sample}/rsem/out.isoforms.results"
    benchmark:
        "benchmarks/rsem/{sample}.json"
    threads:
        N_THREADS
    message:
        "Executing RSEM with {input}"
    run:
        shell("mkdir -p {wildcards.sample}/rsem")
        out_prefix = "{wildcards.sample}/rsem/out"
        cmd = " ".join(["rsem-calculate-expression", "--no-bam-output", "--paired-end", "--bam", "-p {threads}", 
             "{input[1]}", RSEM_REF, out_prefix])
        shell(cmd)


########################################################################
# Generate simulations
########################################################################

# Simulate from RSEM using errors
rule rsem_simulate:
    input:
        "{sample}/rsem/out.isoforms.results"
    output:
        "{sample}/rsem/sim/{n_reads,\d+}/{sim_num,\d+}_1.fq.gz",
        "{sample}/rsem/sim/{n_reads,\d+}/{sim_num,\d+}_2.fq.gz"
    threads: 1
    run:
        shell("mkdir -p {wildcards.sample}/rsem/sim/{wildcards.n_reads}")
        res = "{wildcards.sample}/rsem/sim/{wildcards.n_reads}/{wildcards.sim_num}"
        cmd = " ".join([
            "rsem-simulate-reads",
            RSEM_REF,
            "{wildcards.sample}/rsem/out.stat/out.model",
            "{wildcards.sample}/rsem/out.isoforms.results",
            "0.0",
            "{wildcards.n_reads}",
            "{wildcards.sample}/rsem/sim/{wildcards.n_reads}/{wildcards.sim_num}",
            "--seed", "{wildcards.sim_num}"
            ])
        shell(cmd)
        shell("gzip {0}*.fq".format( res ))


########################################################################
# Alignments
########################################################################

# run bowtie2 on RSEM simulated data for eXpress
rule bwt2_express_rsem_sim:
    input:
        "{sample}/rsem/sim/{nreads}/{sim_id}_1.fq.gz",
        "{sample}/rsem/sim/{nreads}/{sim_id}_2.fq.gz"
    output:
        "{sample}/rsem/sim/{nreads}/{sim_id}/alignments/bwt2.bam"
    benchmark:
        "benchmarks/{sample}/rsem/sim/{nreads}/{sim_id}/bwt2.json"
    threads: N_THREADS
    shell:
        'bowtie2 '
        '--no-mixed --no-discordant --rdg 6,5 --rfg 6,5 --score-min L,-.6,-.4 '
        '-k 200 '
        '-x ' + PSIM_BWT_IDX + ' '
        '-p {threads} '
        '-1 {input[0]} '
        '-2 {input[1]} |'
        'samtools view -Sb - > {output}'


# bwt2 alignments for RSEM
rule bwt2_rsem_rsem_sim:
    input:
        "{sample}/rsem/sim/{nreads}/{sim_id}_1.fq.gz",
        "{sample}/rsem/sim/{nreads}/{sim_id}_2.fq.gz"
    output:
        "{sample}/rsem/sim/{nreads}/{sim_id}/alignments/bwt2_rsem.bam"
    benchmark:
        "benchmarks/{sample}/rsem/sim/{nreads}/{sim_id}/bwt2_rsem.json"
    threads: N_THREADS
    message:
        'Running bowtie2 (thr = {threads}) on {input}'
    shell:
        'bowtie2 '
        '--sensitive --dpad 0 --gbar 99999999 --mp 1,1 --np 1 --score-min L,0,-0.1 '
        '--no-mixed --no-discordant '
        '--seed 42 '
        '-k 200 '
        '-x ' + PSIM_BWT_IDX + ' '
        '-p {threads} '
        '-1 {input[0]} '
        '-2 {input[1]} | '
        'samtools view -Sb - > {output}'


########################################################################
# Quantify simulations
########################################################################

rule sailfish_rsem_sim:
    input:
        SAILFISH,
        "{sample}/rsem/sim/{nreads}/{sim_id}_1.fq.gz",
        "{sample}/rsem/sim/{nreads}/{sim_id}_2.fq.gz",
        PSIM_SAILFISH_IDX
    output:
        '{sample}/rsem/sim/{nreads}/{sim_id}/sailfish/quant.sf'
    benchmark:
        'benchmarks/{sample}/rsem/sim/{nreads}/{sim_id}/sailfish.json'
    threads: N_THREADS
    shell:
        SAILFISH + ' quant '
        '-i {PSIM_SAILFISH_IDX} '
        '-l "T=PE:S=U" '
        '-1 <(zcat {input[0]}) -2 <(zcat {input[1]}) '
        '-p {threads} '
        '-o {wildcards.sample}/rsem/sim/{wildcards.nreads}/{wildcards.sim_id}/sailfish'


rule rsem_rsem_sim:
    input:
        rules.bwt2_rsem_rsem_sim.output
    output:
        "{sample}/rsem/sim/{nreads}/{sim_id}/rsem/out.isoforms.results"
    benchmark:
        "benchmarks/{sample}/rsem/sim/{nreads}/{sim_id}/rsem.json"
    threads: N_THREADS
    message:
        "Executing RSEM with {input}"
    run:
        out_path = "{wildcards.sample}/rsem/sim/{wildcards.nreads}/{wildcards.sim_id}/rsem"
        shell("mkdir -p " + out_path)
        out_prefix = out_path + "/out"
        cmd = " ".join(["rsem-calculate-expression", "--bam", "--paired-end",
            "--no-bam-output", "-p {threads}", "{input}", RSEM_REF, out_prefix])
        shell(cmd)


# run eXpress on RSEM simulations
rule express_rsem_sim:
    input:
        "{sample}/rsem/sim/{nreads}/{sim_id}/alignments/bwt2.bam"
    output:
        "{sample}/rsem/sim/{nreads}/{sim_id}/express/results.xprs"
    benchmark:
        "benchmarks/{sample}/rsem/sim/{nreads}/{sim_id}/express.json"
    threads: 2
    message:
        "eXpress with {input}"
    shell:
        'express --no-bias-correct '
        '-B 10 '
        '-H {wildcards.sample}/*.hap '
        '-o {wildcards.sample}/rsem/sim/'
        '{wildcards.nreads}/{wildcards.sim_id}/express/ ' +
        PSIM_ANNO_FA + ' '
        '{input}'


# run kallisto on RSEM simulations
rule kallisto_rsem_sim:
    input:
        KALLISTO,
        "{sample}/rsem/sim/{nreads}/{sim_id}_1.fq.gz",
        "{sample}/rsem/sim/{nreads}/{sim_id}_2.fq.gz",
        PSIM_KAL_IDX
    output:
        "{sample}/rsem/sim/{nreads}/{sim_id}/kallisto/abundance.h5"
    benchmark:
        "benchmarks/{sample}/rsem/sim/{nreads}/{sim_id}/kallisto.json"
    threads: 1
    message:
        "kallisto quant on {input[0]} {output}"
    shell:
        KALLISTO + " quant -i {PSIM_KAL_IDX} "
        "-o {wildcards.sample}/rsem/sim/{wildcards.nreads}"
        "/{wildcards.sim_id}/kallisto {input[0]} {input[1]}"


# run kallisto on RSEM simulations
rule kallisto_rsem_sim_bs:
    input:
        "{sample}/rsem/sim/{nreads}/{sim_id}_1.fq.gz",
        "{sample}/rsem/sim/{nreads}/{sim_id}_2.fq.gz",
        PSIM_KAL_IDX
    output:
        "{sample}/rsem/sim/{nreads}/{sim_id}/kallisto_bs/abundance.h5"
    benchmark:
        "benchmarks/{sample}/rsem/sim/{nreads}/{sim_id}/kallisto_bs.json"
    threads: 1
    message:
        "kallisto quant w/ bs on {input[0]} {output}"
    shell:
        "kallisto quant -i {PSIM_KAL_IDX} "
        "-o {wildcards.sample}/rsem/sim/{wildcards.nreads}"
        "/{wildcards.sim_id}/kallisto_bs "
        "-b 100 "
        "{input[0]} {input[1]}"


rule psim_report:
     input:
        "analysis/R/NA12716_7_rsem.Rmd",
        expand(HUMAN_PRE + "/rsem/sim/30000000/{sims}_1.fq.gz", sims = SIMS_LIST),
        expand(HUMAN_PRE + "/rsem/sim/30000000/{id}/kallisto/abundance.h5", id = SIMS_LIST ),
        expand(HUMAN_PRE + "/rsem/sim/30000000/{id}/express/results.xprs", id = SIMS_LIST ),
        expand(HUMAN_PRE + "/rsem/sim/30000000/{id}/rsem/out.isoforms.results", id = SIMS_LIST ),
        expand(HUMAN_PRE + "/rsem/sim/30000000/{id}/sailfish/quant.sf", id = SIMS_LIST )        
     output:
        "analysis/R/NA12716_7_rsem.html"
     threads:
        1
     shell:
        source_rmd('analysis/R', 'NA12716_7_rsem.Rmd')
