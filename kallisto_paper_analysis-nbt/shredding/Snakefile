include: "../config.py"

KLIST = [i for i in range(15, 76, 4)]

KAL_BIN = 'kallisto_bigK/build/src/kallisto'
KAL_STO_BIN = 'kallisto_sto/build/src/kallisto'

SIMULATIONS_DIR = "../simulations"
ERROR_FUL_FILES = [
    '{0}/NA12716_7/rsem/sim/30000000/1_1.fq.gz'.format(SIMULATIONS_DIR),
    '{0}/NA12716_7/rsem/sim/30000000/1_2.fq.gz'.format(SIMULATIONS_DIR)
    ]
ERROR_FREE_FILES = ['data/no_error_sim_30000000_1.fq.gz',
    'data/no_error_sim_30000000_2.fq.gz']

OUTPUT_DIR = "output"

rule all:
    input:
        KAL_STO_BIN,
        KAL_BIN,
        expand(OUTPUT_DIR + "/out_sto_{k}/abundance.h5", k = KLIST),
        expand(OUTPUT_DIR + "/out_{k}/abundance.h5", k = KLIST),
        expand(OUTPUT_DIR + "/out_ef_{k}/abundance.h5", k = KLIST),
        expand(OUTPUT_DIR + "/out_sto_ef_{k}/abundance.h5", k = KLIST),
        'shredding.html'


# build binaries
rule sto:
    output:
        KAL_STO_BIN
    shell:
        "git clone -b STO --depth 1 --single-branch https://github.com/pachterlab/kallisto.git kallisto_sto_source; "
        "cd kallisto_sto_source; "
        "mkdir build; "
        "sed -i -e 's/#define MAX_KMER_SIZE 32/#define MAX_KMER_SIZE 96/' src/Kmer.hpp; "
        "cd build; "
        "cmake ..; "
        "make; "
        "cd ..; cd ..; "
        "rm -rf kallisto_sto; "
        "mv kallisto_sto_source kallisto_sto; "


rule bigK:
    output:
        KAL_BIN
    shell:
        "git clone -b v0.42 --depth 1 --single-branch https://github.com/pachterlab/kallisto.git kallisto_bigK_source; "
        "cd kallisto_bigK_source; "
        "mkdir build; "
        "sed -i -e 's/#define MAX_KMER_SIZE 32/#define MAX_KMER_SIZE 96/' src/Kmer.hpp; "
        "cd build; "
        "cmake ..; "
        "make; "
        "cd ..; cd ..; "
        "rm -rf kallisto_bigK; "
        "mv kallisto_bigK_source kallisto_bigK; "


# Simulate from RSEM without errors
rule rsem_ef_simulate:
    output:
       'data/no_error_sim_{n_reads}_1.fq.gz',
       'data/no_error_sim_{n_reads}_2.fq.gz'
    threads: 1
    run:
        shell("mkdir -p data")
        cmd = " ".join([
            "rsem-simulate-reads",
            ANNO_RSEM,
            # RSEM_REF,
            "rsem_params/out.stat/out.model",
            "{SIMULATIONS_DIR}/NA12716_7/rsem/out.isoforms.results",
            "0.0",
            "{wildcards.n_reads}",
            "data/no_error_sim_{wildcards.n_reads}",
            "--seed 42"
            ])
        shell(cmd)
        shell("gzip data/no_error_sim*.fq")


########################################################################
# INDICES
########################################################################

rule kallisto_index:
    input:
        KAL_BIN
    output:
        'indices/ind_{k,\d*}'
    threads: 1
    shell:
        KAL_BIN + ' index '
        '-k {wildcards.k} '
        '-i {output} ' +
        ANNO_FA


rule kallisto_sto_index:
    input:
        KAL_STO_BIN
    output:
        'indices/ind_sto_{k}'
    threads: 1
    shell:
        KAL_STO_BIN + ' index '
        '-k {wildcards.k} '
        '-i {output} ' +
        ANNO_FA


########################################################################
# QUANTIFY SIMULATIONS
########################################################################

rule kallisto_quant:
    input:
        'indices/ind_{k,\d*}',
        ERROR_FUL_FILES[0],
        ERROR_FUL_FILES[1],
        KAL_BIN
    output:
        '{OUTPUT_DIR}/out_{k, \d*}/abundance.h5'
    threads: 1
    shell:
    	'{KAL_BIN} quant '
    	'-i indices/ind_{wildcards.k} '
    	'-o {OUTPUT_DIR}/out_{wildcards.k} ' +
    	ERROR_FUL_FILES[0] + ' ' + ERROR_FUL_FILES[1]


rule kallisto_sto_quant:
    input:
        'indices/ind_sto_{k, \d*}',
        ERROR_FUL_FILES[0],
        ERROR_FUL_FILES[1],
        KAL_STO_BIN
    output:
        '{OUTPUT_DIR}/out_sto_{k, \d*}/abundance.h5'
    threads: 1
    shell:
    	'{KAL_STO_BIN} quant '
    	'--sto '
    	'-l 180 '
    	'-i indices/ind_sto_{wildcards.k} '
    	'-o {OUTPUT_DIR}/out_sto_{wildcards.k} ' +
    	ERROR_FUL_FILES[0] + ' ' + ERROR_FUL_FILES[1]


rule kallisto_quant_error_free:
    input:
        'indices/ind_{k,\d*}',
        ERROR_FREE_FILES[0],
        ERROR_FREE_FILES[1],
        KAL_BIN
    output:
        '{OUTPUT_DIR}/out_ef_{k}/abundance.h5'
    threads: 1
    shell:
        '{KAL_BIN} quant '
        '-i indices/ind_{wildcards.k} '
        '-o {OUTPUT_DIR}/out_ef_{wildcards.k} ' +
        ERROR_FREE_FILES[0] + ' ' + ERROR_FREE_FILES[1]


rule kallisto_sto_quant_error_free:
    input:
        'indices/ind_sto_{k,\d*}',
        ERROR_FREE_FILES[0],
        ERROR_FREE_FILES[1],
        KAL_STO_BIN
    output:
        '{OUTPUT_DIR}/out_sto_ef_{k,\d*}/abundance.h5'
    threads: 1
    shell:
        '{KAL_STO_BIN} quant '
        '--sto '
        '-l 180 '
        '-i indices/ind_sto_{wildcards.k} '
        '-o {OUTPUT_DIR}/out_sto_ef_{wildcards.k} ' +
        ERROR_FREE_FILES[0] + ' ' + ERROR_FREE_FILES[1]


rule shredding_report:
    input:
        'shredding.Rmd',
        expand(OUTPUT_DIR + "/out_sto_{k}/abundance.h5", k = KLIST),
        expand(OUTPUT_DIR + "/out_{k}/abundance.h5", k = KLIST),
        expand(OUTPUT_DIR + "/out_ef_{k}/abundance.h5", k=KLIST),
        expand(OUTPUT_DIR + "/out_sto_ef_{k}/abundance.h5", k=KLIST)
    output:
        'shredding.html',
        'img/shredding_error_free.png',
        'img/shredding_error.png'
    shell:
        source_rmd('.', 'shredding.Rmd')
